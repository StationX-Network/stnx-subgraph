// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Station extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Station entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Station must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Station", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Station | null {
    return changetype<Station | null>(store.get_in_block("Station", id));
  }

  static load(id: string): Station | null {
    return changetype<Station | null>(store.get("Station", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ownerAddress(): string {
    let value = this.get("ownerAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set ownerAddress(value: string) {
    this.set("ownerAddress", Value.fromString(value));
  }

  get daoAddress(): string {
    let value = this.get("daoAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set daoAddress(value: string) {
    this.set("daoAddress", Value.fromString(value));
  }

  get gnosisAddress(): string {
    let value = this.get("gnosisAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set gnosisAddress(value: string) {
    this.set("gnosisAddress", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get tokenType(): string {
    let value = this.get("tokenType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenType(value: string) {
    this.set("tokenType", Value.fromString(value));
  }

  get imageUrl(): string {
    let value = this.get("imageUrl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set imageUrl(value: string) {
    this.set("imageUrl", Value.fromString(value));
  }

  get isGtTransferable(): boolean {
    let value = this.get("isGtTransferable");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isGtTransferable(value: boolean) {
    this.set("isGtTransferable", Value.fromBoolean(value));
  }

  get isGovernanceActive(): boolean {
    let value = this.get("isGovernanceActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isGovernanceActive(value: boolean) {
    this.set("isGovernanceActive", Value.fromBoolean(value));
  }

  get membersCount(): string {
    let value = this.get("membersCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set membersCount(value: string) {
    this.set("membersCount", Value.fromString(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get totalAmountRaised(): string {
    let value = this.get("totalAmountRaised");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set totalAmountRaised(value: string) {
    this.set("totalAmountRaised", Value.fromString(value));
  }

  get distributionAmount(): string {
    let value = this.get("distributionAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set distributionAmount(value: string) {
    this.set("distributionAmount", Value.fromString(value));
  }

  get pricePerToken(): string {
    let value = this.get("pricePerToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set pricePerToken(value: string) {
    this.set("pricePerToken", Value.fromString(value));
  }

  get quorum(): string {
    let value = this.get("quorum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set quorum(value: string) {
    this.set("quorum", Value.fromString(value));
  }

  get threshold(): string {
    let value = this.get("threshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set threshold(value: string) {
    this.set("threshold", Value.fromString(value));
  }

  get raiseAmount(): string {
    let value = this.get("raiseAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set raiseAmount(value: string) {
    this.set("raiseAmount", Value.fromString(value));
  }

  get minDepositAmount(): string {
    let value = this.get("minDepositAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set minDepositAmount(value: string) {
    this.set("minDepositAmount", Value.fromString(value));
  }

  get maxDepositAmount(): string {
    let value = this.get("maxDepositAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set maxDepositAmount(value: string) {
    this.set("maxDepositAmount", Value.fromString(value));
  }

  get depositDeadline(): string {
    let value = this.get("depositDeadline");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set depositDeadline(value: string) {
    this.set("depositDeadline", Value.fromString(value));
  }

  get maxTokensPerUser(): string {
    let value = this.get("maxTokensPerUser");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set maxTokensPerUser(value: string) {
    this.set("maxTokensPerUser", Value.fromString(value));
  }

  get depositTokenAddress(): string {
    let value = this.get("depositTokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set depositTokenAddress(value: string) {
    this.set("depositTokenAddress", Value.fromString(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get entity(): string {
    let value = this.get("entity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set entity(value: string) {
    this.set("entity", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get daoAddress(): string {
    let value = this.get("daoAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set daoAddress(value: string) {
    this.set("daoAddress", Value.fromString(value));
  }

  get daoName(): string {
    let value = this.get("daoName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set daoName(value: string) {
    this.set("daoName", Value.fromString(value));
  }

  get userAddress(): string {
    let value = this.get("userAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set userAddress(value: string) {
    this.set("userAddress", Value.fromString(value));
  }

  get tokenAddress(): string {
    let value = this.get("tokenAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenAddress(value: string) {
    this.set("tokenAddress", Value.fromString(value));
  }

  get depositAmount(): string {
    let value = this.get("depositAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set depositAmount(value: string) {
    this.set("depositAmount", Value.fromString(value));
  }

  get timeStamp(): string {
    let value = this.get("timeStamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set timeStamp(value: string) {
    this.set("timeStamp", Value.fromString(value));
  }

  get gtAmount(): string {
    let value = this.get("gtAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set gtAmount(value: string) {
    this.set("gtAmount", Value.fromString(value));
  }

  get isAdmin(): boolean {
    let value = this.get("isAdmin");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isAdmin(value: boolean) {
    this.set("isAdmin", Value.fromBoolean(value));
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get transactionHash(): string {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transactionHash(value: string) {
    this.set("transactionHash", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get entity(): string {
    let value = this.get("entity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set entity(value: string) {
    this.set("entity", Value.fromString(value));
  }
}
